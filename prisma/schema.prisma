// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                 String              @id @default(uuid())
  name               String
  members            Profile[]
  towers             Tower[]
  searchlists        SearchList[]
  material           Json?
  weather            Json?
  todo               Json?
  towerLocations     Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  groupregistrations GroupRegistration[]
}

model Tower {
  id                 String              @id @default(uuid())
  name               String
  members            Profile[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  organization       Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId     String?
  status             TowerStatus         @default(lifeguard_on_duty)
  type               TowerType           @default(tower)
  location           String
  number             String
  towerdays          TowerDay[]
  dutyplans          DutyPlan[]
  searchlists        SearchList[]
  groupregistrations GroupRegistration[]

  @@index(organizationId)
}

model TowerDay {
  id             String             @id @default(uuid())
  createdAt      DateTime
  updatedAt      DateTime           @updatedAt
  startedAt      DateTime           @db.Time(4)
  status         TowerDayStatus     @default(open)
  guardLeaderId  String
  guardLeader    Profile            @relation(fields: [guardLeaderId], references: [id], onDelete: Cascade, name: "guardLeader")
  towerLeaderId  String
  towerLeader    Profile            @relation(fields: [towerLeaderId], references: [id], onDelete: Cascade, name: "towerLeader")
  watchman       Json?
  watchmanStatus TowerDayFormStatus @default(open)
  todo           Json?
  todoStatus     TowerDayFormStatus @default(open)
  incident       String?
  incidentStatus TowerDayFormStatus @default(open)
  weather        Json?
  weatherStatus  TowerDayFormStatus @default(open)
  material       Json?
  materialStatus TowerDayFormStatus @default(open)
  towerId        String
  tower          Tower              @relation(fields: [towerId], references: [id], onDelete: Cascade)
  dutyplan       DutyPlan?
  dutyplanStatus TowerDayFormStatus @default(open)

  @@index([towerId])
}

model DutyPlan {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  date       DateTime
  towerDay   TowerDay? @relation(fields: [towerDayId], references: [id], onDelete: Cascade)
  towerDayId String?   @unique
  shifts     Shift[]
  tower      Tower?    @relation(fields: [towerId], references: [id], onDelete: Cascade)
  towerId    String?
}

model Shift {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       ShiftType @default(duty)
  startTime  DateTime
  endTime    DateTime
  user       Profile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  dutyPlan   DutyPlan  @relation(fields: [dutyPlanId], references: [id], onDelete: Cascade)
  dutyPlanId String
}

enum ShiftType {
  duty
  prepared
}

model Profile {
  id                          String        @id @default(uuid())
  userId                      String        @unique
  gender                      String?
  firstName                   String
  lastName                    String
  salutation                  String?
  title                       String?
  birthName                   String?
  birthDate                   DateTime?     @db.Date
  birthPlace                  String?
  street                      String?
  houseNumber                 String?
  zipCode                     String?
  location                    String?
  email                       String        @unique
  phone                       String?
  drkMember                   Boolean?      @default(false)
  drkMemberLocation           String?
  emergencyContactLastName    String?
  emergencyContactFirstName   String?
  emergencyContactPhone       String?
  bankName                    String?
  iban                        String?
  bic                         String?
  differentBankholder         String?
  lifeguardLicense            String?
  snorkelLicense              String?
  lifeguardWaterRescueService String?
  waterRescuer                String?
  riverRescuer                String?
  medicalTraining             String?
  paramedicHelper             String?
  paramedic                   String?
  paramedicAssistance         String?
  paramedicEmergency          String?
  physician                   String?
  physicianEmergency          String?
  squadLeader                 String?
  groupLeader                 String?
  guardLeader                 String?
  trainLeader                 String?
  carDrivingLicense           String?
  blueLightInstruction        String?
  boatmanLake                 String?
  boatmanInland               String?
  lifeboatOperator            String?
  rwcPilotStage               String?
  srcCertificate              String?
  bosCertificate              String?
  droneClass                  String?
  volunteerDataSheet          String?
  youthLeaderCard             String?
  instructorSwimmer           String?
  lifeguardInstructor         String?
  instructorWaterRescuer      String?
  instructorMedicalService    String?
  guardWalker                 String?
  boat                        String?
  car                         String?
  rwc                         String?
  guardLeaderInstruction      String?
  role                        Role[]        @default([intern])
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  organization                Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId              String?
  towers                      Tower[]
  shifts                      Shift[]
  guardLeaders                TowerDay[]    @relation(name: "guardLeader")
  towerLeaders                TowerDay[]    @relation(name: "towerLeader")

  @@index([userId, organizationId])
}

model SearchList {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  date           DateTime
  timeSearched   DateTime     @db.Time(4)
  firstName      String
  lastName       String
  description    String?
  timeFound      DateTime?    @db.Time(4)
  handOver       Boolean      @default(false)
  handOverTo     String?
  tower          Tower        @relation(fields: [towerId], references: [id], onDelete: Cascade)
  towerId        String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
}

model GroupRegistration {
  id                  String       @id @default(uuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  date                DateTime
  time                DateTime     @db.Time(4)
  name                String
  count               Int
  supervisorFirstName String
  supervisorLastName  String
  tower               Tower        @relation(fields: [towerId], references: [id], onDelete: Cascade)
  towerId             String
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String
}

enum Role {
  admin
  full_time_security_guard
  volunteer_security_guard
  towerleader
  watchman
  intern
}

enum TowerStatus {
  lifeguard_on_duty
  use_caution_when_swimming
  beach_closed
}

enum TowerDayStatus {
  open
  ongoing
  completed
}

enum TowerDayFormStatus {
  open
  ongoing
  completed
  incomplete
}

enum TowerType {
  tower
  quad
}
